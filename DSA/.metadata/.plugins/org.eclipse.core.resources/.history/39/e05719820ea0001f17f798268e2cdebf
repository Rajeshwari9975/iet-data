package com.bst.demo;

public class BinaryTree {
	
	class Node{
		int data;
		Node left;
		Node right;
		public Node(int data) {
			super();
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	
	Node root;

	public BinaryTree() {
		super();
		this.root = null;
	}

	public void addValue(int val) {
		root = addDataToTree(root,val);
	}

	private Node addDataToTree(Node root2, int val) {
		Node newNode = new Node(val);
		
		if(root2 == null) {
			root2 = newNode;
			
		}
		else {
			if(val < root.data) {
				addDataToTree(root2.left, val);
			}
			else {
				addDataToTree(root2.right, val);
			}
		}
		return root2;
	}

	public void displayTree() {
		inOrder();
		preOrder();
		postOrder();
	}

	private void postOrder() {
		System.out.println("Postorder Traversal");
	}

	private void preOrder() {
		System.out.println("Preorder Traversal");
	}

	private void inOrder() {
		System.out.println("Inorder Traversal");
		inOrderTraverse(root);
	}

	private void inOrderTraverse(Node root2) {
		if(root2 != null) {
			inOrderTraverse(root2.left);
			System.out.print(root2.data+"  ");
			inOrderTraverse(root2.right);
		}
	}
	
	
	

}
